{"version":3,"sources":["redux/bot/bot.action.js","App.js","reportWebVitals.js","redux/bot/bot.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["addBotToCart","bot","type","payload","NavBar","cartItems","useSelector","state","botData","className","to","length","HomePage","BotsPage","props","bots","map","id","BotDetailsCard","match","dispatch","useDispatch","find","toString","params","botid","description","indexValue","cagr","onClick","BotItemCard","history","push","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","botReducer","action","combineReducers","middleware","logger","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5e07819.chunk.js","sourcesContent":["export const addBotToCart = (bot) => ({\r\n  type: 'ADD_BOT_TO_CART',\r\n  payload: bot,\r\n});\r\n","import './App.scss';\n\nimport { Route, Switch, Link } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addBotToCart } from './redux/bot/bot.action';\n\n//main app component\nconst App = () => {\n  return (\n    <div className='App'>\n      <Route path='/' component={NavBar} />\n      <Switch>\n        <Route exact path='/' component={HomePage} />\n        <Route path='/bots' component={BotsPage} />\n        <Route path='/bots-details/:botid' component={BotDetailsCard} />\n      </Switch>\n    </div>\n  );\n};\n\n//navigation bar component\nconst NavBar = () => {\n  const cartItems = useSelector((state) => state.botData.cartItems);\n  return (\n    <div className='nav'>\n      <Link to='/' className='dashboard'>\n        <p>dashboard</p>\n      </Link>\n      <div className='cart'>\n        <p>cart - {cartItems.length}</p>\n      </div>\n    </div>\n  );\n};\n\n//homepage component\nconst HomePage = () => {\n  return (\n    <div className='home-page'>\n      <Link to='/bots'>Click for Available bots</Link>\n    </div>\n  );\n};\n\n//botspage component\nconst BotsPage = (props) => {\n  const bots = useSelector((state) => state.botData.bots);\n\n  return (\n    <div className='bots-page'>\n      {bots.map((bot) => (\n        <BotItemCard key={bot.id} {...bot} {...props} />\n      ))}\n    </div>\n  );\n};\n\n//bot details card component\nconst BotDetailsCard = ({ match }) => {\n  const dispatch = useDispatch();\n  const bots = useSelector((state) => state.botData.bots);\n\n  const { id, bot, description, indexValue, cagr } = bots.find(\n    (bot) => bot.id.toString() === match.params.botid.toString()\n  );\n\n  return (\n    <div className='bot-details'>\n      <div className='container'>\n        <div className='content'>\n          <h5>{bot}</h5>\n          <p>{description}</p>\n          <button\n            onClick={() =>\n              dispatch(addBotToCart({ id, bot, description, indexValue, cagr }))\n            }>\n            buy\n          </button>\n        </div>\n        <div className='index'>\n          <span className='title'>index value</span>\n          <span className='value'>{indexValue}</span>\n        </div>\n        <div className='cagr'>\n          <span className='title'>cagr</span>\n          <span className='value'>{cagr}%</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n//bot item card component\nconst BotItemCard = (props) => {\n  const { id, bot, description, indexValue, cagr, history } = props;\n  const dispatch = useDispatch();\n\n  return (\n    <div className='bot-card'>\n      <h5>{bot}</h5>\n      <div className='index'>\n        <span className='title'>index value</span>\n        <span className='value'>{indexValue}</span>\n      </div>\n      <div className='cagr'>\n        <span className='title'>cagr</span>\n        <span className='value'>{cagr}%</span>\n      </div>\n      <div className='bot-btn'>\n        <button\n          className='view-algo'\n          onClick={() => history.push(`/bots-details/${id}`)}>\n          view algo\n        </button>\n        <button\n          className='buy-bot'\n          onClick={() =>\n            dispatch(addBotToCart({ id, bot, description, indexValue, cagr }))\n          }>\n          buy\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const INITIAL_STATE = {\r\n  bots: [\r\n    {\r\n      id: 1,\r\n      bot: 'Hot Bot',\r\n      description:\r\n        'Hot bot is low volatility portfolio of growth stocks selected based on our proprietary metrics',\r\n      indexValue: 289.34,\r\n      cagr: 34,\r\n    },\r\n    {\r\n      id: 2,\r\n      bot: 'Cool Bot',\r\n      description:\r\n        'Cool bot is low volatility portfolio of growth stocks selected based on our proprietary metrics',\r\n      indexValue: 439.34,\r\n      cagr: 28,\r\n    },\r\n    {\r\n      id: 3,\r\n      bot: 'Options Bot',\r\n      description:\r\n        'Options bot is low volatility portfolio of growth stocks selected based on our proprietary metrics',\r\n      indexValue: 139.34,\r\n      cagr: 42,\r\n    },\r\n  ],\r\n  cartItems: [],\r\n};\r\n\r\nconst botReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_BOT_TO_CART':\r\n      return {\r\n        ...state,\r\n        cartItems: [...state.cartItems, action.payload],\r\n      };\r\n\r\n    default:\r\n      return {\r\n        ...state,\r\n      };\r\n  }\r\n};\r\n\r\nexport default botReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport botReducer from './bot/bot.reducer';\r\n\r\nexport default combineReducers({\r\n  botData: botReducer,\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport logger from 'redux-logger';\r\nimport rootReducer from './root-reducer';\r\n\r\nconst middleware = [logger];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}